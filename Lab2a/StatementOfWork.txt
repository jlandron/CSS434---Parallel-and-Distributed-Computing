1. Purpose
This laboratory work intens to set up your MPI Java execution environment. Follow the professor's explanation about how to use MPI Java and demonstrates an execution of ~css434/hw2/MatrixMult.java.
2. Statement of Work
Set up your execution enviornment:
The process for setting it up to run the first time for each user is
cumbersome.  After the initial user set-up it works well without much
fuss.

# login as self
# make file .mpd.conf  vi/emacs/pico .mpd.conf
# in it write one line:
secretword=<secretword>

where <secretword> is a secure key you create but not your normal password
save the file

# set the correct permissions on this file (other permissions won't work)
chmod 600 .mpd.conf

# create the mpd.hosts file in your working directry where you run your
program. The file should include a list of uw1-320 machines as seen in
~css534/lab2/mpd.hosts:

uw1-320-10.uwb.edu
uw1-320-11.uwb.edu
uw1-320-12.uwb.edu
uw1-320-13.uwb.edu

# edit .bash_profile file as follows:

export PATH=/usr/apps/mpich121-`uname -p`/bin:$PATH
export JAVAPATH=/usr/lib/jvm/default-java
export CLASSPATH=$CLASSPATH:/usr/apps/mpiJava-`uname -p`/lib/classes:.
export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/apps/mpiJava-`uname -p`/lib
export PATH=/usr/apps/mpiJava-`uname -p`/src/scripts:$JAVAPATH/bin:$PATH

# either relogin or type at the command line:
# source .bash_profile

# test that your set-up works on the current host
mpd &
mpiexec -n 1 /bin/hostname
mpdallexit

# if you get an error or warning this is a problem.
# You should get the hostname of your current host

**  Need to be able to ssh without a password to other machines in order to
use MPICH.  If this is not already set up:
**************************************************************************
**  ssh-keygen -t rsa                                                   **
**  #  at "Enter file in which to save key",  to accept default         **
**  #  at "Enter passphrase"  to keep the passphrase empty.             **
**  #  do the same thing again                                          **
**  #  then go to the .ssh directory                                    **
**  # and change the name of id_rsa.pub to authorized_keys              **
**  cd .ssh                                                             **
**  mv id_rsa.pub authorized_keys                                       **
**  # ssh to all lab machines to set up                                 **
**  # first ssh need to respond "yes" to "continue connecting"          **
**************************************************************************

The first time a new host is added to the first "ring"; it needs to be
established by a "yes" response to "continue connecting".  Every time the
output hangs, type "yes".

You can get all 32 hosts by starting a ring of 4 and typing "yes" 4
times, then starting a ring of 8 (the original 4 plus 4 more) and
typing "yes" 4 times.  After the initial 8, I had to add one at a
time, with the new host always being the last.

Once you have added all the hosts in this way, you never have to type
"yes" again, they were all established for mpich.

mpdboot -n 4 -v
mpdallexit
mpdboot -n 8 -v
mpdallexit

Note that you have to list 8  machine names in your mpd.hosts file
before typeing "mpdboot -n 8 -v".

Now, you are ready to run a mpiJava program.
To compile:
javac *.java

To run
mpdboot -n #cpus -v
prunjava #cpus Hello
prunjava #cpus MatrixMult size

To stop
mpdallexit
Evaluate a performance improvement of MatrixMult.java, using 1, 2, and 4 computing nodes.
mpdboot -n 4 -v
prunjava 1 MatrixMult 2000
prunjava 2 MatrixMult 2000
prunjava 4 MatrixMult 2000
mpdallexit
3. Related Materials
To make a quick review for MPI Java, see the slides: p18-21 of MPI.ppt
For detilas of MPI Java, refer to the following tutorial and specificatioin.
http://www.hpjava.org/courses/arl/lectures/mpi.ppt
http://www.hpjava.org/reports/mpiJava-spec/mpiJava-spec.pdf
4. What to Turn in
Turn in your execution output of MatrixMult with 1, 2, and 4 computing nodes.
Your execution output, (i.e., output.txt)